@model WebApplication1.Models.TeamCreateViewModel
@{
    ViewData["Title"] = "Create New Team";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    .form-container {
        background-color: #1a1a1a;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 0 25px rgba(0, 255, 144, 0.15);
        max-width: 800px;
        margin: 40px auto;
    }

        .form-container h1 {
            color: #00ff91;
            text-align: center;
            margin-bottom: 25px;
            font-weight: bold;
        }

    .control-label {
        color: #00ff91;
        font-weight: bold;
        margin-bottom: 8px;
        display: block;
    }

    .form-control, .form-select {
        background-color: #2b2b2b;
        border: 1px solid #00ff91;
        color: #e0e0e0;
        border-radius: 5px;
        padding: 10px;
        transition: border-color 0.3s ease, box-shadow 0.3s ease;
    }

        .form-control:focus, .form-select:focus {
            background-color: #303030;
            border-color: #00ff91;
            box-shadow: 0 0 10px rgba(0, 255, 144, 0.5);
            color: #fff;
        }

    .btn-submit-team {
        background: linear-gradient(45deg, #00ff91, #00ffaa);
        color: #111;
        font-weight: bold;
        padding: 12px 25px;
        border: none;
        border-radius: 50px;
        cursor: pointer;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
        display: block;
        width: 100%;
        font-size: 1.1em;
        margin-top: 10px;
    }

        .btn-submit-team:hover {
            transform: scale(1.03);
            box-shadow: 0 8px 25px rgba(0, 255, 144, 0.6);
        }

    .text-danger {
        color: #ff4d4d !important;
        font-size: 0.9em;
        margin-top: 5px;
        display: block;
    }

    .player-slot, .review-sub-form {
        margin-bottom: 15px;
        padding: 15px;
        border: 1px solid #00ff9130;
        border-radius: 5px;
        background-color: #222;
    }

        .player-slot .form-select {
            flex-grow: 1;
        }

    .player-slot-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
    }

        .player-slot-header h5 {
            margin: 0;
            color: #00dd80;
        }
</style>

<div class="form-container">
    <h1>@ViewData["Title"]</h1>
    <hr style="border-color: rgba(0, 255, 144, 0.2);" />

    <form asp-action="Create" asp-controller="Teams" method="post" enctype="multipart/form-data">
        <div asp-validation-summary="ModelOnly" class="text-danger form-group"></div>

        <div class="form-group mb-3">
            <label asp-for="Name" class="control-label"></label>
            <input asp-for="Name" class="form-control" />
            <span asp-validation-for="Name" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="Description" class="control-label"></label>
            <textarea asp-for="Description" class="form-control" rows="3"></textarea>
            <span asp-validation-for="Description" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="PricePerHour" class="control-label"></label>
            <input asp-for="PricePerHour" type="number" step="0.01" class="form-control" />
            <span asp-validation-for="PricePerHour" class="text-danger"></span>
        </div>

        <div class="form-group mb-3">
            <label asp-for="TeamImageFile" class="control-label"></label>
            <input asp-for="TeamImageFile" type="file" class="form-control" />
            <span asp-validation-for="TeamImageFile" class="text-danger"></span>
        </div>

        <hr style="border-color: rgba(0, 255, 144, 0.2);" />

        @* --- Player Selection Section --- *@
        <div class="form-group mb-3">
            <h4 style="color: #00ff91; margin-bottom: 15px;">Team Members</h4>
            <div id="teamPlayersContainer">
                @* Player selection dropdowns will be appended here by JavaScript *@
                @* Render existing selected players if form reloads on error *@
                @if (Model.SelectedPlayerIds != null)
                {
                    for (int i = 0; i < Model.SelectedPlayerIds.Count; i++)
                    {
                        <div class="player-slot mb-2" style="display: flex; align-items: center;">
                            <label class="control-label me-2" style="white-space:nowrap;">Player @(i + 1):</label>
                            <select name="SelectedPlayerIds" class="form-control form-select me-2" style="flex-grow:1;">
                                <option value="">-- Select a Player --</option>
                                @foreach (var playerItem in Model.AvailablePlayers)
                                {
                                    bool isSelected = playerItem.Value == Model.SelectedPlayerIds[i].ToString();
                                    <option value="@playerItem.Value" selected="@isSelected">@playerItem.Text</option>
                                }
                            </select>
                            <button type="button" class="btn btn-sm btn-danger remove-player-button">X</button>
                        </div>
                    }
                }
            </div>
            <button type="button" id="addPlayerButton" class="btn btn-sm btn-info mt-2" style="background-color: #00aabb; border-color: #00aabb;">+ Add Player Slot</button>
        </div>

        <hr style="border-color: rgba(0, 255, 144, 0.2);" />

        @* --- Initial Team Reviews Section (similar to Player creation) --- *@
        <div class="form-group mb-3">
            <h4 style="color: #00ff91; margin-bottom: 15px;">Initial Team Reviews</h4>
            <div id="initialTeamReviewsContainer">
                @* Review forms will be dynamically added here *@
                @if (Model.InitialTeamReviews != null)
                {
                    for (int i = 0; i < Model.InitialTeamReviews.Count; i++)
                    {
                        <div class="review-sub-form">
                            <div class="player-slot-header">
                                <h5>Review @(i + 1)</h5>
                                <button type="button" class="btn btn-sm btn-danger remove-review-button">X</button>
                            </div>
                            <input type="hidden" name="InitialTeamReviews.Index" value="@i" />
                            <div class="form-group mb-2">
                                <label asp-for="InitialTeamReviews[i].ReviewerName" class="control-label"></label>
                                <input asp-for="InitialTeamReviews[i].ReviewerName" class="form-control" />
                                <span asp-validation-for="InitialTeamReviews[i].ReviewerName" class="text-danger"></span>
                            </div>
                            <div class="form-group mb-2">
                                <label asp-for="InitialTeamReviews[i].CommentText" class="control-label"></label>
                                <textarea asp-for="InitialTeamReviews[i].CommentText" class="form-control" rows="2"></textarea>
                                <span asp-validation-for="InitialTeamReviews[i].CommentText" class="text-danger"></span>
                            </div>
                            <div class="form-group mb-2">
                                <label asp-for="InitialTeamReviews[i].StarRating" class="control-label"></label>
                                <input asp-for="InitialTeamReviews[i].StarRating" type="number" class="form-control" min="1" max="5" />
                                <span asp-validation-for="InitialTeamReviews[i].StarRating" class="text-danger"></span>
                            </div>
                        </div>
                    }
                }
            </div>
            <button type="button" id="addTeamReviewButton" class="btn btn-sm btn-success mt-2" style="background: linear-gradient(45deg, #00dd80, #00ee99); border:none; color: #111; font-weight:bold;">+ Add Initial Team Review</button>
        </div>

        <div class="form-group mt-4">
            <input type="submit" value="Create Team" class="btn-submit-team" />
        </div>
        <div class="form-group text-center mt-3">
            @* Update this link as needed, e.g., to a team list page *@
            <a asp-action="Index" asp-controller="Home" class="back-link" style="color:#00ff91;">Back to Home</a>
        </div>
    </form>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // --- Dynamic Player Selection ---
            const addPlayerButton = document.getElementById('addPlayerButton');
            const playersContainer = document.getElementById('teamPlayersContainer');
            const availablePlayersJson = @Html.Raw(Json.Serialize(Model.AvailablePlayers ?? new List<SelectListItem>()));
            let playerSlotCounter = playersContainer.querySelectorAll('.player-slot').length;

            addPlayerButton.addEventListener('click', function () {
                playerSlotCounter++;
                const playerDivId = `player-slot-${playerSlotCounter}`;
                const playerDiv = document.createElement('div');
                playerDiv.classList.add('player-slot', 'mb-2');
                playerDiv.id = playerDivId;
                playerDiv.style.display = 'flex';
                playerDiv.style.alignItems = 'center';

                const selectLabel = document.createElement('label');
                selectLabel.classList.add('control-label', 'me-2');
                selectLabel.style.whiteSpace = 'nowrap';
                selectLabel.textContent = `Player ${playerSlotCounter}:`;

                const select = document.createElement('select');
                select.name = `SelectedPlayerIds`; // All select elements share this name
                select.classList.add('form-control', 'form-select', 'me-2');
                select.style.flexGrow = '1';

                const defaultOption = document.createElement('option');
                defaultOption.value = "";
                defaultOption.text = "-- Select a Player --";
                select.appendChild(defaultOption);

                availablePlayersJson.forEach(player => {
                    const option = document.createElement('option');
                    option.value = player.Value;
                    option.text = player.Text;
                    select.appendChild(option);
                });

                const removeButton = document.createElement('button');
                removeButton.type = 'button';
                removeButton.textContent = 'X';
                removeButton.classList.add('btn', 'btn-sm', 'btn-danger', 'remove-player-button');
                removeButton.onclick = function () {
                    document.getElementById(playerDivId).remove();
                    // Renumber labels if needed, though not critical for functionality
                };

                playerDiv.appendChild(selectLabel);
                playerDiv.appendChild(select);
                playerDiv.appendChild(removeButton);
                playersContainer.appendChild(playerDiv);
            });

            // Event delegation for removing dynamically added player slots
            playersContainer.addEventListener('click', function (event) {
                if (event.target && event.target.classList.contains('remove-player-button')) {
                    event.target.closest('.player-slot').remove();
                }
            });

            // --- Dynamic Team Review Addition (Similar to Player Review) ---
            const addTeamReviewButton = document.getElementById('addTeamReviewButton');
            const teamReviewsContainer = document.getElementById('initialTeamReviewsContainer');
            let teamReviewIndex = teamReviewsContainer.querySelectorAll('.review-sub-form').length;

            addTeamReviewButton.addEventListener('click', function () {
                const actualReviewIndex = teamReviewIndex; // Use for unique IDs if needed
                const reviewFormHtml = `
                        <div class="review-sub-form">
                             <div class="player-slot-header">
                                <h5>Review ${actualReviewIndex + 1}</h5>
                                <button type="button" class="btn btn-sm btn-danger remove-review-button">X</button>
                            </div>
                            <input type="hidden" name="InitialTeamReviews.Index" value="${actualReviewIndex}" />
                            <div class="form-group mb-2">
                                <label class="control-label" for="InitialTeamReviews_${actualReviewIndex}__ReviewerName">Reviewer Name</label>
                                <input type="text" name="InitialTeamReviews[${actualReviewIndex}].ReviewerName" id="InitialTeamReviews_${actualReviewIndex}__ReviewerName" class="form-control" data-val="true" data-val-required="Reviewer name cannot be empty." />
                                <span class="text-danger field-validation-valid" data-valmsg-for="InitialTeamReviews[${actualReviewIndex}].ReviewerName"></span>
                            </div>
                            <div class="form-group mb-2">
                                <label class="control-label" for="InitialTeamReviews_${actualReviewIndex}__CommentText">Comment</label>
                                <textarea name="InitialTeamReviews[${actualReviewIndex}].CommentText" id="InitialTeamReviews_${actualReviewIndex}__CommentText" class="form-control" rows="2" data-val="true" data-val-required="Comment cannot be empty."></textarea>
                                <span class="text-danger field-validation-valid" data-valmsg-for="InitialTeamReviews[${actualReviewIndex}].CommentText"></span>
                            </div>
                            <div class="form-group mb-2">
                                <label class="control-label" for="InitialTeamReviews_${actualReviewIndex}__StarRating">Rating (1-5)</label>
                                <input type="number" name="InitialTeamReviews[${actualReviewIndex}].StarRating" id="InitialTeamReviews_${actualReviewIndex}__StarRating" class="form-control" min="1" max="5" value="5" data-val="true" data-val-required="Rating is required." data-val-range="Rating must be between 1 and 5." data-val-range-min="1" data-val-range-max="5" />
                                <span class="text-danger field-validation-valid" data-valmsg-for="InitialTeamReviews[${actualReviewIndex}].StarRating"></span>
                            </div>
                        </div>`;

                const tempDiv = document.createElement('div');
                tempDiv.innerHTML = reviewFormHtml;
                const newReviewForm = tempDiv.firstElementChild;
                teamReviewsContainer.appendChild(newReviewForm);

                var form = $(newReviewForm).closest("form");
                form.removeData("validator");
                form.removeData("unobtrusiveValidation");
                $.validator.unobtrusive.parse(form);

                teamReviewIndex++;
            });

            teamReviewsContainer.addEventListener('click', function (event) {
                if (event.target && event.target.classList.contains('remove-review-button')) {
                    event.target.closest('.review-sub-form').remove();
                }
            });
        });
    </script>
}