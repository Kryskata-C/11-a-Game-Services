@model WebApplication1.Models.PlayerDetailViewModel
@{
    ViewData["Title"] = $"Details for {Model.Player.GamerTag}";
    // The main Player object is still passed from the original Details action
    var player = Model.Player;
}

<h1>@ViewData["Title"]</h1>

<div>
    <h4>Player Information</h4>
    <hr />
    <dl class="row">
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => player.GamerTag)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => player.GamerTag)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => player.Description)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => player.Description)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => player.PricePerHour)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => player.PricePerHour)
        </dd>
        <dt class="col-sm-2">
            @Html.DisplayNameFor(model => player.Rating)
        </dt>
        <dd class="col-sm-10">
            @Html.DisplayFor(model => player.Rating)
        </dd>
        <dt class="col-sm-2">
            Team
        </dt>
        <dd class="col-sm-10">
            @(player.Team != null ? player.Team.Name : "N/A")
        </dd>
        @if (!string.IsNullOrEmpty(player.ImageUrl))
        {
            <dt class="col-sm-2">
                Image
            </dt>
            <dd class="col-sm-10">
                <img src="@player.ImageUrl" alt="Player Image" style="max-width: 200px; max-height: 200px;" />
            </dd>
        }
    </dl>
</div>

@if (User.IsInRole("Admin"))
{
    <div>
        <a asp-action="Edit" asp-route-id="@player.Id" class="btn btn-warning">Edit</a> |
        <a asp-action="Delete" asp-route-id="@player.Id" class="btn btn-danger">Delete</a> |
    </div>
}
<a asp-action="PlayerHire" class="btn btn-secondary mt-2">Back to List</a>
<a asp-controller="Reviews" asp-action="Create" asp-route-playerId="@player.Id" class="btn btn-info mt-2">Add Review for this Player</a>


<hr />
<h4>Player Reviews</h4>
<div id="reviewsContainer">
    <p>Loading reviews...</p>
</div>
<div id="reviewsPagination" class="mt-3">
</div>


@section Scripts {
    <script>
        $(document).ready(function () {
            var playerId = @player.Id;
            loadReviews(playerId, 1); // Load first page of reviews on document ready

            // Event delegation for pagination buttons
            $('#reviewsPagination').on('click', 'button.page-link', function (e) {
                e.preventDefault();
                var page = $(this).data('page');
                if (page) {
                    loadReviews(playerId, page);
                }
            });
        });

        function loadReviews(playerId, page) {
            $('#reviewsContainer').html('<p>Loading reviews...</p>');
            $('#reviewsPagination').html('');

            $.ajax({
                url: '/api/ReviewsApi/GetReviewsForPlayer/' + playerId,
                type: 'GET',
                data: { page: page }, // CORRECTED: playerId removed from here, it's in the URL path
                success: function (response) {
                    $('#reviewsContainer').empty();
                    if (response.reviews && response.reviews.length > 0) {
                        var reviewsHtml = '<ul class="list-group">';
                        $.each(response.reviews, function (index, review) {
                            reviewsHtml += '<li class="list-group-item">';
                            reviewsHtml += '<h5>' + escapeHtml(review.reviewerName) + ' <small class="text-muted">(' + review.starRating + ' stars on ' + review.reviewDate + ')</small></h5>';
                            reviewsHtml += '<p>' + escapeHtml(review.commentText) + '</p>';
                            reviewsHtml += '</li>';
                        });
                        reviewsHtml += '</ul>';
                        $('#reviewsContainer').html(reviewsHtml);
                    } else {
                        $('#reviewsContainer').html('<p>No reviews found for this player.</p>');
                    }

                    // Render pagination
                    renderPagination(response.playerId, response.currentPage, response.totalPages);
                },
                error: function (xhr, status, error) {
                    $('#reviewsContainer').html('<p class="text-danger">Error loading reviews. Please try again later.</p>');
                    console.error("AJAX Error: ", status, error, xhr.responseText);
                }
            });
        }

        function renderPagination(playerId, currentPage, totalPages) {
            if (totalPages <= 1) {
                $('#reviewsPagination').html('');
                return;
            }

            var paginationHtml = '<nav aria-label="Reviews navigation"><ul class="pagination">';

            // Previous button
            paginationHtml += '<li class="page-item ' + (currentPage === 1 ? 'disabled' : '') + '">';
            paginationHtml += '<button class="page-link" data-page="' + (currentPage - 1) + '" ' + (currentPage === 1 ? 'disabled' : '') + '>Previous</button>';
            paginationHtml += '</li>';

            // Page numbers (simplified here, could be more complex for many pages)
            for (let i = 1; i <= totalPages; i++) {
                paginationHtml += '<li class="page-item ' + (i === currentPage ? 'active' : '') + '">';
                paginationHtml += '<button class="page-link" data-page="' + i + '">' + i + '</button>';
                paginationHtml += '</li>';
            }

            // Next button
            paginationHtml += '<li class="page-item ' + (currentPage === totalPages ? 'disabled' : '') + '">';
            paginationHtml += '<button class="page-link" data-page="' + (currentPage + 1) + '" ' + (currentPage === totalPages ? 'disabled' : '') + '>Next</button>';
            paginationHtml += '</li>';

            paginationHtml += '</ul></nav>';
            $('#reviewsPagination').html(paginationHtml);
        }

        function escapeHtml(unsafe) {
            if (unsafe === null || typeof unsafe === 'undefined') return '';
            return unsafe
                .toString()
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

    </script>
}