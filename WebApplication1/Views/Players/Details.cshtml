@model WebApplication1.Models.PlayerDetailViewModel
@{
    ViewData["Title"] = $"Details for {Model.Player.GamerTag}";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <style>
        :root {
            --primary-color: #0d6efd; /* Example Blue */
            --primary-hover-color: #0b5ed7;
            --background-color: #1c1e22; /* Dark background */
            --surface-color: #282c34; /* Slightly lighter surface */
            --text-color: #f0f0f0;
            --text-muted-color: #a0a0a0;
            --border-color: #404552;
            --animation-duration: 0.5s;
            --star-color-filled: #ffc107; /* Yellow for stars */
            --star-color-empty: var(--border-color);
        }

        .player-details-container {
            background-color: var(--surface-color);
            padding: 2rem;
            border-radius: 12px;
            box-shadow: 0 8px 25px rgba(0,0,0,0.2);
            opacity: 0;
            animation: fadeIn var(--animation-duration) ease-out forwards;
            color: var(--text-color);
        }

        @@keyframes fadeIn {
            to {
                opacity: 1;
            }
        }

        .player-header {
            display: flex;
            align-items: center;
            margin-bottom: 2rem;
            padding-bottom: 1.5rem;
            border-bottom: 1px solid var(--border-color);
        }

        .player-image-large {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            object-fit: cover;
            border: 4px solid var(--primary-color);
            margin-right: 2rem;
            box-shadow: 0 4px 15px rgba(0,0,0,0.15);
            transition: transform 0.3s ease;
        }

            .player-image-large:hover {
                transform: scale(1.05);
            }

        .player-title h1 {
            color: #fff;
            margin-bottom: 0.25rem;
            font-size: 2.2rem;
        }

        .player-title .text-muted {
            color: var(--text-muted-color) !important;
            font-size: 1rem;
        }

        .player-info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .info-block {
            background-color: var(--background-color);
            padding: 1.25rem;
            border-radius: 8px;
            border: 1px solid var(--border-color);
        }

            .info-block dt {
                font-weight: 600;
                color: var(--primary-color);
                margin-bottom: 0.3rem;
                font-size: 0.85rem;
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }

            .info-block dd {
                margin-left: 0;
                color: var(--text-color);
                font-size: 1rem;
            }

                .info-block dd.description-text {
                    font-size: 0.95rem;
                    line-height: 1.6;
                }

        .section-heading-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 2.5rem;
            margin-bottom: 1.5rem;
            padding-bottom: 0.5rem;
            border-bottom: 2px solid var(--primary-color);
        }

        .section-heading {
            color: var(--primary-color);
            display: inline-block;
            font-size: 1.5rem;
            margin: 0;
        }

        .add-review-btn {
            font-size: 1.5rem;
            color: var(--primary-color);
            padding: 0.3rem 0.6rem;
            line-height: 1;
            border-radius: 50%;
            width: 36px;
            height: 36px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            text-decoration: none;
            border: 1px solid var(--primary-color);
            transition: background-color 0.2s ease, color 0.2s ease, transform 0.2s ease, box-shadow 0.2s ease;
        }

            .add-review-btn:hover {
                background-color: var(--primary-color);
                color: #fff;
                transform: scale(1.1) rotate(90deg);
                box-shadow: 0 0 10px var(--primary-color);
            }

        .review-list {
            list-style: none;
            padding: 0;
        }

        .review-item {
            background-color: var(--background-color);
            border: 1px solid var(--border-color);
            border-left: 4px solid var(--primary-color);
            padding: 1.5rem;
            margin-bottom: 1rem;
            border-radius: 8px;
            opacity: 0;
            transform: translateX(-20px);
            animation: slideInLeft var(--animation-duration) ease-out forwards;
            /* animation-delay is set by script */
        }

        @@keyframes slideInLeft {
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        .review-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 0.75rem;
        }

            .review-header .reviewer-name {
                font-weight: bold;
                color: #fff;
                font-size: 1.05rem;
            }

            .review-header .review-date {
                font-size: 0.8rem;
                color: var(--text-muted-color);
            }

        .star-rating-display span {
            color: var(--star-color-filled);
            font-size: 1.1em;
            margin-right: 1px;
        }

        .star-rating-display .empty-star {
            color: var(--star-color-empty);
        }

        .review-comment {
            line-height: 1.6;
            color: var(--text-color);
            font-size: 0.95rem;
        }

        .no-reviews {
            padding: 1.5rem;
            text-align: center;
            color: var(--text-muted-color);
            background-color: var(--background-color);
            border-radius: 8px;
            border: 1px dashed var(--border-color);
        }

            .no-reviews a {
                color: var(--primary-color);
                text-decoration: none;
            }

                .no-reviews a:hover {
                    text-decoration: underline;
                }


        .pagination-container {
            margin-top: 2rem;
            text-align: center;
        }

        .pagination .page-item .page-link {
            background-color: var(--surface-color);
            border-color: var(--border-color);
            color: var(--primary-color);
            margin: 0 2px;
            border-radius: 4px;
            transition: background-color 0.2s ease, color 0.2s ease, border-color 0.2s ease;
        }

        .pagination .page-item.active .page-link {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
            color: #fff;
            z-index: 1;
        }

        .pagination .page-item.disabled .page-link {
            background-color: var(--background-color);
            border-color: var(--border-color);
            color: var(--text-muted-color);
        }

        .pagination .page-item .page-link:hover {
            background-color: var(--primary-hover-color);
            border-color: var(--primary-hover-color);
            color: #fff;
        }

        .pagination .page-item.active .page-link:hover {
            background-color: var(--primary-color);
            border-color: var(--primary-color);
        }

        .action-buttons {
            margin-top: 2.5rem;
            padding-top: 1.5rem;
            border-top: 1px solid var(--border-color);
            display: flex;
            justify-content: flex-end;
            gap: 0.5rem;
        }

            .action-buttons .btn {
                /* margin-left is handled by gap */
            }

        .btn-primary, .btn-warning, .btn-secondary {
            padding: 0.5rem 1rem;
            font-size: 0.9rem;
            border-radius: 5px;
            text-decoration: none;
            transition: all 0.3s ease;
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
            border: 1px solid var(--primary-color);
        }

            .btn-primary:hover {
                background-color: var(--primary-hover-color);
                border-color: var(--primary-hover-color);
            }

        .btn-warning {
            background-color: #ffc107;
            color: #212529;
            border: 1px solid #ffc107;
        }

            .btn-warning:hover {
                background-color: #e0a800;
                border-color: #d39e00;
            }

        .btn-secondary {
            background-color: #6c757d;
            color: white;
            border: 1px solid #6c757d;
        }

            .btn-secondary:hover {
                background-color: #5a6268;
                border-color: #545b62;
            }

    </style>
}

<div class="player-details-container">
    <div class="player-header">
        @if (!string.IsNullOrEmpty(Model.Player.ImageUrl))
        {
            <img src="@Url.Content(Model.Player.ImageUrl)" alt="Image for @Model.Player.GamerTag" class="player-image-large" />
        }
        else
        {
            <img src="@Url.Content("~/images/default-player.png")" alt="Default Player Image" class="player-image-large" />
        }
        <div class="player-title">
            <h1>@Html.DisplayFor(model => model.Player.GamerTag)</h1>
            @if (!string.IsNullOrEmpty(Model.Player.Description) && Model.Player.Description.Length > 150)
            {
                <p class="text-muted">@Html.Raw(Model.Player.Description.Substring(0, 147) + "...")</p>
            }
            else if (!string.IsNullOrEmpty(Model.Player.Description))
            {
                <p class="text-muted">@Html.DisplayFor(model => model.Player.Description)</p>
            }
        </div>
    </div>

    <h4 class="section-heading">Player Information</h4>
    <div class="player-info-grid">
        <div class="info-block">
            <dt>Price Per Hour</dt>
            <dd>$@Model.Player.PricePerHour.ToString("F2")</dd>
        </div>
        <div class="info-block">
            <dt>Overall Rating</dt>
            <dd>
                @Model.Player.Rating.ToString("F1") / 5.0
                <span class="star-rating-display ms-2">
                    @for (int i = 1; i <= 5; i++)
                    {
                        if (Model.Player.Rating >= i)
                        {
                            <span>★</span>
                        }
                        else if (Model.Player.Rating >= (i - 0.5))
                        {
                            <span>◐</span> @* Corrected: Removed C# comment from here *@
                        }
                        else
                        {
                            <span class="empty-star">☆</span>
                        }
                    }
                </span>
            </dd>
        </div>
        @if (Model.Player.Team != null)
        {
            <div class="info-block">
                <dt>Team</dt>
                <dd>@Html.DisplayFor(model => model.Player.Team.Name)</dd>
            </div>
        }
    </div>

    @if (!string.IsNullOrEmpty(Model.Player.Description))
    {
        <h4 class="section-heading">Full Description</h4>
        <div class="info-block">
            <dd class="description-text">@Html.Raw(Model.Player.Description.Replace("\n", "<br />"))</dd>
        </div>
    }

    <div class="section-heading-container">
        <h4 class="section-heading">Player Reviews (@(Model.Player.PlayerReviews?.Count() ?? 0))</h4>
        <a asp-controller="Reviews" asp-action="Create" asp-route-playerId="@Model.Player.Id" class="add-review-btn" title="Add a Review">
            +
        </a>
    </div>

    @if (Model.ReviewsOnCurrentPage != null && Model.ReviewsOnCurrentPage.Any())
    {
        <ul class="review-list">
            @foreach (var review in Model.ReviewsOnCurrentPage)
            {
                <li class="review-item">
                    <div class="review-header">
                        <span class="reviewer-name">@Html.DisplayFor(modelItem => review.ReviewerName)</span>
                        <span class="review-date">@review.ReviewDate.ToString("MMM dd, yyyy")</span>
                    </div>
                    <div class="star-rating-display">
                        @for (int i = 1; i <= 5; i++)
                        {
                            <span>@(i <= review.StarRating ? "★" : "☆")</span>
                        }
                    </div>
                    <p class="review-comment">@Html.Raw(review.CommentText.Replace("\n", "<br />"))</p>
                </li>
            }
        </ul>

        @if (Model.TotalPages > 1)
        {
            <nav aria-label="Reviews pagination" class="pagination-container">
                <ul class="pagination justify-content-center">
                    <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                        <a class="page-link" asp-action="Details" asp-route-id="@Model.Player.Id" asp-route-page="@(Model.CurrentPage - 1)" aria-label="Previous">
                            <span aria-hidden="true">&laquo;</span>
                        </a>
                    </li>
                    @for (int i = 1; i <= Model.TotalPages; i++)
                    {
                        <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                            <a class="page-link" asp-action="Details" asp-route-id="@Model.Player.Id" asp-route-page="@i">@i</a>
                        </li>
                    }
                    <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                        <a class="page-link" asp-action="Details" asp-route-id="@Model.Player.Id" asp-route-page="@(Model.CurrentPage + 1)" aria-label="Next">
                            <span aria-hidden="true">&raquo;</span>
                        </a>
                    </li>
                </ul>
            </nav>
        }
    }
    else
    {
        <div class="no-reviews">
            <p>No reviews yet for @Model.Player.GamerTag. Be the first to <a asp-controller="Reviews" asp-action="Create" asp-route-playerId="@Model.Player.Id">add one</a>!</p>
        </div>
    }

    <div class="action-buttons">
        @if (User.IsInRole("Admin"))
        {
            <a asp-action="Edit" asp-controller="Players" asp-route-id="@Model.Player.Id" class="btn btn-warning">Edit Player</a>
        }
        <a asp-controller="Players" asp-action="PlayerHire" class="btn btn-secondary">Back to List</a>
        @if (Model.Player != null)
        {
            <form asp-controller="Home" asp-action="AddToBasket" method="post" style="display:inline;">
                <input type="hidden" name="playerId" value="@Model.Player.Id" />
                <input type="hidden" name="playerName" value="@Model.Player.GamerTag" />
                <input type="hidden" name="price" value="@Model.Player.PricePerHour" />
                <button type="submit" class="btn btn-primary">Hire @Model.Player.GamerTag</button>
            </form>
        }
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const reviewItems = document.querySelectorAll('.review-item');
            reviewItems.forEach((item, index) => {
                item.style.animationDelay = (index * 0.1) + 's';
            });

            const playerImages = document.querySelectorAll('.player-image-large');
            playerImages.forEach(img => {
                img.onerror = function () {
                    this.onerror = null;
                    this.src = '@Url.Content("~/images/default-player.png")';
                };
            });
        });
    </script>
}